// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for NextAuth
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)
    isRound2      Boolean   @default(false)

    accounts Account[]
    sessions Session[]

    redeemCodeId String?
    RedeemCode   RedeemCode? @relation(fields: [redeemCodeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id String @id @default(cuid())

    type              String
    provider          String
    providerAccountId String

    id_token                 String? // @db.Text
    token_type               String?
    access_token             String? // @db.Text
    refresh_token            String? // @db.Text
    refresh_token_expires_in Int?
    expires_at               Int?
    scope                    String?
    session_state            String?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(cuid())

    sessionToken String   @unique
    expires      DateTime

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([identifier, token])
}

// End of necessary models for NextAuth

// Base models
model Puzzle {
    id String @id @default(cuid())

    route      String     @unique
    puzzleType PuzzleType

    hint          String
    hintDeduction Int

    solution String
    points   Int

    redeemCode String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RedeemCode {
    id String @id @default(cuid())

    code       String  @unique @default(cuid())
    oneTimeUse Boolean
    revoked    Boolean @default(false)

    RevokedBy User[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([code])
}

// Base enums
enum UserRole {
    USER
    ADMIN
}

enum PuzzleType {
    BOUNTY_ONE
    BOUNTY_MANY
    POINTS
}
