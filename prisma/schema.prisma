// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for NextAuth
model User {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  password         String
  role             UserRole @default(USER)
  roundTwoSelected Boolean  @default(false)

  Submission Submission[]

  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

// End of necessary models for NextAuth

// Base models

model ServerSettings {
  id String @id @default(cuid())

  roundOneLive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Puzzle {
  id    String @id @default(cuid())
  name  String @unique
  route String @unique

  difficulty PuzzleDifficulty @default(EASY)

  minusPoints Int
  hint        String

  plusPoints Int
  solution   String

  Submission Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id String @id @default(cuid())

  status    SubmissionStatus @default(PENDING)
  startTime DateTime         @default(now())
  endTime   DateTime?

  hintTaken Boolean @default(false)
  points    Int?
  answer    String?

  userId String
  User   User   @relation(fields: [userId], references: [id])

  puzzleId String
  Puzzle   Puzzle @relation(fields: [puzzleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, puzzleId])
}

// Base enums
enum UserRole {
  USER
  ADMIN
}

enum PuzzleDifficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  QUIT
}
