// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for NextAuth
model User {
  id       String   @id @default(cuid())
  name     String
  email    String   @unique
  role     UserRole @default(USER)
  isRound2 Boolean  @default(false)
  password String

  sessions Session[]

  // redeemCodeId String?
  // RedeemCode   RedeemCode? @relation(fields: [redeemCodeId], references: [id])

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Puzzle       Puzzle[]
  Submission   Submission[]
  RedeemCode   RedeemCode?  @relation(fields: [redeemCodeId], references: [id])
  redeemCodeId String?
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

// End of necessary models for NextAuth

// Base models
model Puzzle {
  id          String      @id @default(cuid())
  name        String
  route       String      @unique
  puzzleType  PuzzleType  @default(POINTS)
  difficulty  Difficulty  @default(EASY)
  puzzleRound PuzzleRound @default(ROUND_ONE)

  hint          String?
  hintDeduction Int?

  solution      String
  points        Int
  minimumPoints Int

  RedeemCode          RedeemCode? @relation(fields: [redeemCodeId], references: [id])
  BountyOneClaimed    User?       @relation(fields: [userId], references: [id])
  minimumBountyPoints Int?

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String?
  Submission   Submission[]
  redeemCodeId String?
}

model Submission {
  id     String           @id @default(cuid())
  User   User             @relation(fields: [userId], references: [id])
  userId String
  status SubmissionStatus @default(PENDING)
  answer String?

  startTime DateTime  @default(now())
  endTime   DateTime?

  Puzzle   Puzzle @relation(fields: [puzzleId], references: [id])
  puzzleId String

  points    Int?
  hintTaken Boolean @default(false)

  @@unique([userId, puzzleId])
}

model RedeemCode {
  id String @id @default(cuid())

  code       String  @unique @default(cuid())
  oneTimeUse Boolean
  revoked    Boolean @default(false)

  RevokedBy User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Puzzle    Puzzle[]

  @@index([code])
}

// Base enums
enum UserRole {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum PuzzleType {
  BOUNTY_ONE
  BOUNTY_MANY
  POINTS
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  QUIT
}

enum PuzzleRound {
  ROUND_ONE
  ROUND_TWO
}
